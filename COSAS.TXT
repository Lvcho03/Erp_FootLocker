MODAL PASSWORD: id="passwordModal" class="modal hidden">
    <div class="modal-content">
        <span class="close-btn" onclick="cerrarModal()">&times;</span>
        <h2>Confirmar Contraseña</h2>
        <p>Por favor, ingresa tu contraseña para continuar:</p>
        <input id="passwordInput" type="password" placeholder="Contraseña" required>
        <button onclick="verificarContraseña()">Confirmar</button>
    </div>
</div>
---------------------------------------------------------------
SU CSS: /* Estilo principal del modal */
#passwordModal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(39, 42, 87, 0.9); /* Fondo semi-transparente */
    z-index: 1050;
    justify-content: center;
    align-items: center;
    transition: opacity 0.3s ease-in-out;
}

/* Clase para mostrar el modal */
#passwordModal.show {
    display: flex;
    opacity: 1;
}

/* Contenido del modal */
#passwordModal .modal-content {
    background: linear-gradient(145deg, #3a3e78, #202346); /* Fondo degradado */
    box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.5); /* Sombra elegante */
    border-radius: 15px;
    padding: 30px;
    max-width: 400px;
    width: 90%; /* Adaptación responsiva */
    text-align: center;
    color: #fff;
    font-family: "Roboto", sans-serif;
    position: relative;
}

/* Botón de cierre */
#passwordModal .close-btn {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 1.5rem;
    color: #d1d3ff;
    cursor: pointer;
    background: none;
    border: none;
    outline: none;
    transition: transform 0.2s ease-in-out;
}

/* Efecto hover en el botón de cierre */
#passwordModal .close-btn:hover {
    transform: scale(1.2);
    color: #ffffff;
}

/* Título del modal */
#passwordModal h2 {
    font-size: 1.8rem;
    font-weight: bold;
    margin-bottom: 15px;
    color: #ffffff;
}

/* Texto del modal */
#passwordModal p {
    font-size: 1rem;
    margin-bottom: 20px;
    color: #d1d3ff;
    line-height: 1.5;
}

/* Input de contraseña */
#passwordModal input[type="password"] {
    width: 100%;
    padding: 10px 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    border: none;
    outline: none;
    background: #272a57;
    color: #ffffff;
    font-size: 1rem;
    box-shadow: inset 0px 4px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
}

/* Efecto hover en el input */
#passwordModal input[type="password"]:focus {
    background: #3a3e78;
    box-shadow: inset 0px 4px 12px rgba(0, 0, 0, 0.3);
}

/* Botón de confirmar */
#passwordModal button {
    background-color: #4e52a3;
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
}

/* Efecto hover en el botón de confirmar */
#passwordModal button:hover {
    background-color: #696dbf;
    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.5);
    transform: translateY(-2px);
}

/* Animación de entrada */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

#passwordModal.show .modal-content {
    animation: fadeIn 0.3s ease-in-out;
}

/* Responsividad */
@media (max-width: 768px) {
    #passwordModal .modal-content {
        width: 95%;
    }

    #passwordModal h2 {
        font-size: 1.5rem;
    }
}
-------------------------------------------------------------------


PEGAR ESTO EN CARRITO JS  COMPLETO:  
document.addEventListener('DOMContentLoaded', () => {
    const cartItems = [];
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalElement = document.getElementById('cartTotal'); // Elemento donde se muestra el total del carrito
    const checkoutButton = document.getElementById('checkoutButton');
    const totalModalElement = document.getElementById('cartTotal'); // Referencia al modal total

    // Función para actualizar el carrito
    function updateCart() {
        cartItemsContainer.innerHTML = ''; // Limpiar contenido actual
        let total = 0;
    
        cartItems.forEach(item => {
            total += item.price * item.quantity;
    
            const li = document.createElement('li');
            li.className = 'list-group-item d-flex justify-content-between align-items-center';
            
            // Se añade un enlace o botón para eliminar
            li.innerHTML = 
                ${item.name} x${item.quantity} 
                <span>$${(item.price * item.quantity).toFixed(2)}</span>
                <button class="delete-btn" data-id="${item.id}">&times;</button> <!-- Aquí se agrega el botón -->
            ;
    
            cartItemsContainer.appendChild(li);
        });
    
        cartTotalElement.textContent = total.toFixed(2);
        totalModalElement.textContent = total.toFixed(2); // Actualizamos el total en el modal
    
        // Asegurarnos de que los botones para eliminar estén capturados
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', eliminarDelCarrito);
        });
    }
    
    function eliminarDelCarrito(event) {
        const button = event.target;
        const idProducto = parseInt(button.getAttribute('data-id'), 10); // Obtener el ID del producto desde el data-id del botón
        
        const index = cartItems.findIndex(item => item.id === idProducto);
        if (index !== -1) {
            cartItems.splice(index, 1); // Eliminar el producto del carrito
            updateCart(); // Actualizar la visualización del carrito
        }
    }
    


    // Función para agregar productos al carrito
    window.agregarAlCarrito = function (button) {
        const fila = button.closest('tr'); // Encuentra la fila que contiene el botón
        const idProducto = parseInt(fila.dataset.id, 10); // Obtiene el ID real del producto
    
        if (!idProducto) {
            alert('No se encontró el producto.');
            return;
        }
    
        const name = fila.children[1].textContent; // Nombre del producto
        const price = parseFloat(fila.children[3].textContent); // Precio del producto
        const quantityInput = fila.querySelector('input[type="number"]');
        const quantity = parseInt(quantityInput.value, 10); // Cantidad seleccionada
    
        if (quantity > 0) {
            const existingItem = cartItems.find(item => item.id === idProducto);
    
            if (existingItem) {
                existingItem.quantity += quantity; // Incrementar cantidad si ya existe en el carrito
            } else {
                cartItems.push({ id: idProducto, name, price, quantity }); // Agregar nuevo producto al carrito
            }
    
            updateCart();
        } else {
            alert('La cantidad debe ser mayor a 0.');
        }
    };

    function cerrarModalCarrito(){
        const modal = document.getElementById('cartModal');
        modal.style.display = 'none'; // Ocultar el modal
        modal.classList.remove('fade-in'); // Eliminar el efecto fade-in


    }

    // Función para mostrar el modal de la contraseña
    function mostrarModalContraseña() {
        const modal = document.getElementById('passwordModal');
        modal.style.display = 'flex'; // Usamos flex para centrar el modal
        modal.classList.add('fade-in'); // Añadimos el efecto fade-in
    }

    // Función que cierra el modal de confirmación de contraseña
    function cerrarModal() {
        const modal = document.getElementById('passwordModal');
        modal.style.display = 'none'; // Ocultar el modal
        modal.classList.remove('fade-in'); // Eliminar el efecto fade-in
    }

    // Función que verifica la contraseña ingresada
    function verificarContraseña() {
        const passwordInput = document.getElementById('passwordInput').value;
        const usuarioGuardado = JSON.parse(localStorage.getItem('user'));

        if (!usuarioGuardado) {
            alert("No hay un usuario en sesión. Por favor, inicia sesión.");
            cerrarModal();
            return;
        }

        // Verificar si la contraseña ingresada coincide con la guardada en localStorage
        if (passwordInput === usuarioGuardado.password) {
            cerrarModal();
            realizarVenta(); // Llama a la función para realizar la compra
        } else {
            alert("Contraseña incorrecta. Inténtalo de nuevo.");
        }
    }

    // Función async que maneja la venta
    async function realizarVenta() {
        // Cambiar el estado del botón
        checkoutButton.textContent = 'Procesando...';
        checkoutButton.disabled = true;

        // Datos del cliente, forma de pago y fecha de la venta
        const idCliente = 101; // Supongamos que este es el ID del cliente autenticado
        const formaPago = "Efectivo"; // Forma de pago seleccionada
        const fecha = new Date().toISOString().split("T")[0]; // Fecha actual en formato YYYY-MM-DD

        // Capturar el total del modal
        const totalModal = parseFloat(totalModalElement.textContent);

        // Crear el objeto de venta
        const ventaData = {
            idCliente,
            formaPago,
            fecha,
            productos: cartItems.map(item => ({
                idProducto: item.id,
                cantidad: item.quantity,
                precio: item.price * item.quantity
            })),
            total: totalModal // Se añade el total del modal al objeto de venta
        };

        try {
            // Enviar datos al servidor
            const response = await fetch('http://localhost:3000/crearventa', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(ventaData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error al registrar la venta');
            }

            const result = await response.json();

            if (result.success) {
                alert('Venta realizada con éxito.');
                cartItems.length = 0; // Vaciar carrito
                updateCart(); // Actualizar visualización del carrito

                // Cambiar el estado del botón
                checkoutButton.textContent = 'Realizar Venta';
                checkoutButton.disabled = false;
            } else {
                alert('Error: ' + result.message);
                checkoutButton.textContent = 'Realizar Venta';
                checkoutButton.disabled = false;
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Ocurrió un error al realizar la venta. Por favor, inténtalo nuevamente.');
            checkoutButton.textContent = 'Realizar Venta';
            checkoutButton.disabled = false;
        }
    }

    // Asegúrate de que el evento de "Realizar Venta" esté correctamente asignado al botón
    if (checkoutButton) {
        checkoutButton.addEventListener('click', async () => {

            cerrarModalCarrito();
            // Mostrar el modal de confirmación de contraseña
            mostrarModalContraseña();

        });
    }

    // Evento para verificar la contraseña cuando se haga clic en el botón "Confirmar" del modal
    const confirmarBtn = document.querySelector('#passwordModal button');
    if (confirmarBtn) {
        confirmarBtn.addEventListener('click', () => {
            verificarContraseña();
        });
    }

    // Evento para cerrar el modal cuando se haga clic en el botón "Cerrar" del modal
    const cerrarBtn = document.querySelector('#passwordModal .close-btn');
    if (cerrarBtn) {
        cerrarBtn.addEventListener('click', () => {
            cerrarModal();
        });
    }
});


Y AÑADIRLE ESTAS MODIFICACIONES:
function cerrarModal() {
    const modal = document.getElementById('passwordModal');
    modal.style.display = 'none'; // Ocultar el modal
    modal.classList.remove('fade-in'); // Eliminar el efecto fade-in

    // Remover manualmente el fondo negro (modal-backdrop)
    const backdrop = document.querySelector('.modal-backdrop');
    if (backdrop) {
        backdrop.remove(); // Elimina el elemento del DOM
    }
}

function mostrarModalContraseña() {
    const modal = document.getElementById('passwordModal');
    modal.style.display = 'flex'; // Usamos flex para centrar el modal
    modal.classList.add('fade-in'); // Añadimos el efecto fade-in

    // Crear el fondo negro si no existe
    if (!document.querySelector('.modal-backdrop')) {
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop fade show';
        document.body.appendChild(backdrop); // Añadirlo al DOM
    }
}
-----------------------------------------------------------------

cojer el fetch que registrara constantemente el stock 